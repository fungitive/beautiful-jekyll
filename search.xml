<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/08/31/2018-07-10-Python-%E6%A0%87%E5%87%86%E5%BA%93/"/>
      <url>/2018/08/31/2018-07-10-Python-%E6%A0%87%E5%87%86%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h2><p>Enter text in <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>. Use the toolbar above, or click the <strong>?</strong> button for formatting help.<br>Python丰富而强大遍历的标准库是其最突出的优点之一.</p><p>这里当然不可能说明所有的标准库, 本文只简单列出一些标准库的使用, 还有一部分在其它博文中说明:</p><pre><code>Python时间系统Python解析xml与JSONrequests发送HTTP请求PDB调试Python程序Python日志模块loggingPython正则表达式模块rePython虚拟环境virtualenvPython 数据库Python SocketPython WSGI接口使用urllib访问网络资源</code></pre><p>操作系统环境os</p><p>建议使用 import os 风格而非 from os import *。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。</p><p>在使用 os 这样的大型模块时内置的 dir() 和 help() 函数非常有用。<br>命令行参数sys</p><p>通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。</p><p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。</p><pre><code>&gt;&gt;&gt; sys.stderr.write(&apos;Warning, log file not found starting a new one\n&apos;)Warning, log file not found starting a new one</code></pre><p>数学math<br>数据压缩zlib</p><p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。</p><pre><code>&gt;&gt;&gt; import zlib&gt;&gt;&gt; s = b&apos;witch which has which witches wrist watch&apos;&gt;&gt;&gt; len(s)41&gt;&gt;&gt; t = zlib.compress(s)&gt;&gt;&gt; len(t)37&gt;&gt;&gt; zlib.decompress(t)b&apos;witch which has which witches wrist watch&apos;&gt;&gt;&gt; zlib.crc32(s)226805979</code></pre><p>性能测试timeit</p><pre><code>&gt;&gt;&gt; from timeit import Timer&gt;&gt;&gt; Timer(&apos;t=a; a=b; b=t&apos;, &apos;a=1; b=2&apos;).timeit()0.57535828626024577&gt;&gt;&gt; Timer(&apos;a,b = b,a&apos;, &apos;a=1; b=2&apos;).timeit()0.54962537085770791</code></pre><p>文件通配符glob</p><p>glob模块提供了一个函数用于从目录通配符搜索中生成文件列表：</p><pre><code>&gt;&gt;&gt; import glob&gt;&gt;&gt; glob.glob(&apos;*.py&apos;)[&apos;primes.py&apos;, &apos;random.py&apos;, &apos;quote.py&apos;]  </code></pre><p>高精度小数 decimal</p><p>decmial模块可以提供制定精度的小数运算，使用前需要&gt;&gt;&gt;import decmial。decmial对象由构造函数decmial.Decmial()根据一个int或字符串参数建立。Python3.5中decmial.Decmial()可以根据float建立对象，但那是不精确的。</p><pre><code>&gt;&gt;&gt;decimal.Decimal(1)Decimal(&apos;1&apos;)&gt;&gt;&gt;decimal.Decimal(&quot;1.2&quot;)Decimal(&apos;1.2&apos;)</code></pre><p>math与cmath库中的数学函数对decimal不适用，但decimal自身提供了一系列数学函数。</p><pre><code>&gt;&gt;&gt; x = decimal.Decimal(2)&gt;&gt;&gt; x.exp()Decimal(&apos;7.389056098930650227230427461&apos;)&gt;&gt;&gt; decimal.Decimal.exp(x)Decimal(&apos;7.389056098930650227230427461&apos;)</code></pre><p>对象序列化pickle</p><p>Python的pickle模块实现了基本的数据序列和反序列化。<br>序列化：<br>​<br>import pickle<br>pickle.dump(obj, file, [,protocol])</p><p>反序列化：</p><p>obj = pickle.load(file)</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python运维常用的20个库和模块</title>
      <link href="/2018/08/31/2018-07-10-python-test/"/>
      <url>/2018/08/31/2018-07-10-python-test/</url>
      <content type="html"><![CDATA[<p>Python运维常用的20个库和模块</p><p>1、psutil是一个跨平台库（<a href="https://github.com/giampaolo/psutil）" target="_blank" rel="noopener">https://github.com/giampaolo/psutil）</a><br>能够实现获取系统运行的进程和系统利用率（内存，CPU,磁盘，网络等），主要用于系统监控，分析和系统资源及进程的管理。</p><p>2、IPy（<a href="http://github.com/haypo/python-ipy）,辅助IP规划。" target="_blank" rel="noopener">http://github.com/haypo/python-ipy）,辅助IP规划。</a></p><p>3、dnspython(<a href="http://dnspython.org)Python实现的一个DNS工具包。" target="_blank" rel="noopener">http://dnspython.org)Python实现的一个DNS工具包。</a></p><p>4、difflib：difflib作为Python的标准模块，无需安装，作用是对比文本之间的差异。</p><p>5、filecmp:系统自带，可以实现文件，目录，遍历子目录的差异，对比功能。</p><p>6、smtplib：发送电子邮件模块</p><p>7、pycurl(<a href="http://pycurl.sourceforge.net)是一个用C语言写的libcurl" target="_blank" rel="noopener">http://pycurl.sourceforge.net)是一个用C语言写的libcurl</a> Python实现，功能强大，支持的协议有：FTP,HTTP,HTTPS,TELNET等，可以理解为Linux下curl命令功能的Python封装。（PS：PycURL在前几天的文章里有提及过）</p><p>8、XlsxWriter:操作Excel工作表的文字，数字，公式，图表等。</p><p>9、rrdtool:用于跟踪对象的变化，生成这些变化的走走势图</p><p>10、scapy(<a href="http://www.wecdev.org/projects/scapy/)是一个强大的交互式数据包处理程序，它能够对数据包进行伪造或解包，包括发送数据包，包嗅探，应答和反馈等功能。" target="_blank" rel="noopener">http://www.wecdev.org/projects/scapy/)是一个强大的交互式数据包处理程序，它能够对数据包进行伪造或解包，包括发送数据包，包嗅探，应答和反馈等功能。</a></p><p>11、Clam Antivirus免费开放源代码防毒软件，pyClamad,可以让Python模块直接使用ClamAV病毒扫描守护进程calmd。</p><p>12、pexpect:可以理解成Linux下expect的Python封装，通过pexpect我们可以实现对ssh,ftp,passwd,telnet等命令行进行自动交互，而无需人工干涉来达到自动化的目的。</p><p>13、paramiko是基于Python实现的SSH2远程安装连接，支持认证及密钥方式。可以实现远程命令执行，文件传输，中间SSH代理等功能。相对于Pexpect,封装的层次更高，更贴近SSH协议的功能，官网地址：<a href="http://paramiko.org(依赖：Crypto,Ecdsa,Python开发包python-devel)" target="_blank" rel="noopener">http://paramiko.org(依赖：Crypto,Ecdsa,Python开发包python-devel)</a></p><p>14、fabric是基于Python实现的SSH命令行工具，简化了SSH的应用程序部署及系统管理任务，它提供了系统基础的操作组件，可以实现本地或远程shell命令，包括命令执行，文件上传，下载及完整执行日志输出等功能。Fabric在paramiko的基础上做了更高一层的封装，操作起来更加简单。官网地址：<a href="http://www.fabfile.org(依赖setuptools,Crypto,paramiko包支持)" target="_blank" rel="noopener">http://www.fabfile.org(依赖setuptools,Crypto,paramiko包支持)</a></p><p>15、CGIHTTPRequestHandler实现对CGI的支持。</p><p>16、ansible(<a href="http://www.ansibleworks.com/)一种集成IT系统的配置管理，应用部署，执行特定任务的开源平台。基于Python实现，由Paramiko和PyYAML两个关键模块构建。Ansibl与Saltstack最大的区别是Ansible无需在被控主机上部署任何客户端，默认直接通过SSH通道进行远程命令执行或下发功能。" target="_blank" rel="noopener">http://www.ansibleworks.com/)一种集成IT系统的配置管理，应用部署，执行特定任务的开源平台。基于Python实现，由Paramiko和PyYAML两个关键模块构建。Ansibl与Saltstack最大的区别是Ansible无需在被控主机上部署任何客户端，默认直接通过SSH通道进行远程命令执行或下发功能。</a></p><p>17、YAML:是一种用来表达数据序列的编程语言。</p><p>18、playbook：一个非常简单的配置管理和多主机部署系统。</p><p>19、saltstack(<a href="http://saltstack.com)是一个服务器基础架构集中化管理平台，一般可以理解为简化版的puppet和加强版的func。Saltstack基于Python语言实现，结合轻量级消息队列ZeroMQ,与Python每三方模块（Pyzmq,PyCrypto,Pyjinja2,python-msgpack和PyYAML等）构建。" target="_blank" rel="noopener">http://saltstack.com)是一个服务器基础架构集中化管理平台，一般可以理解为简化版的puppet和加强版的func。Saltstack基于Python语言实现，结合轻量级消息队列ZeroMQ,与Python每三方模块（Pyzmq,PyCrypto,Pyjinja2,python-msgpack和PyYAML等）构建。</a></p><p>20、func，为解决集群管理，监控问题需设计开发的系统管理基础框架。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker三剑客compose、machine、swarm</title>
      <link href="/2018/08/31/2018-08-08-docker/"/>
      <url>/2018/08/31/2018-08-08-docker/</url>
      <content type="html"><![CDATA[<p>docker三剑客compose、machine、swarm<br>docker-compose<br>安装compose<br>curl -L <a href="https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$</a>(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose<br>chmod +x /usr/local/bin/docker-compose<br>测试安装<br>    $ docker-compose –version<br>    docker-compose version 1.21.2, build 1719ceb<br>常用命令<br>命令:<br>      build              Build or rebuild services<br>      bundle             Generate a Docker bundle from the Compose file<br>      config             Validate and view the Compose file<br>      create             Create services<br>      down               Stop and remove containers, networks, images, and volumes<br>      events             Receive real time events from containers<br>      exec               Execute a command in a running container<br>      help               Get help on a command<br>      images             List images<br>      kill               Kill containers<br>      logs               View output from containers<br>      pause              Pause services<br>      port               Print the public port for a port binding<br>      ps                 List containers<br>      pull               Pull service images<br>      push               Push service images<br>      restart            Restart services<br>      rm                 Remove stopped containers<br>      run                Run a one-off command<br>      scale              Set number of containers for a service<br>      start              Start services<br>      stop               Stop services<br>      top                Display the running processes<br>      unpause            Unpause services<br>      up                 Create and start containers<br>      version            Show the Docker-Compose version information</p><p><a href="https://docs.docker.com/compose/overview/" target="_blank" rel="noopener">https://docs.docker.com/compose/overview/</a></p><p>docker-machine<br>简介<br>docker-machine是安装docker环境的一个工具，可以在一台机器上通过命令控制几台机器安装docker环境，运行docker命令，创建docker swarm集群的工具。<br>安装<br>    docker-machine和compose有点类似，都是一个可运行的linux二进制文件(下面都是基于linux版本做的)，下载下来这个文件后放到/usr/local/bin里面设置文件权限就可以直接使用了，docker-machine的github地址<br>    <a href="https://github.com/docker/machine" target="_blank" rel="noopener">https://github.com/docker/machine</a><br>    curl -L <a href="https://github.com/docker/machine/releases/download/v0.10.0/docker-machine-`uname" target="_blank" rel="noopener">https://github.com/docker/machine/releases/download/v0.10.0/docker-machine-`uname</a> -s<code>-</code>uname -m` &gt;/tmp/docker-machine &amp;&amp;<br>    chmod +x /tmp/docker-machine &amp;&amp;<br>     sudo cp /tmp/docker-machine /usr/local/bin/docker-machine<br>使用<br>    按照docker-machine github上的介绍，它是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。根据他的描述和github上的例子可以看出他可以直接在指定平台上创建机器。<br>    我们这里只测试已经创建好有ip的实体机或者虚拟机。<br>    docker-machine操作各个机器实际上用ssh无密码访问的，如果是在已经配置好ip的实体机或虚拟机上用就要手动或者使用脚本设置无密码访问了。<br>无密码访问<br>ssh-keygen #一直回车<br>ssh-copy-id <a href="mailto:root@192.168.1.28" target="_blank" rel="noopener">root@192.168.1.28</a> #ip为docker-machine要操作的机器，输入密码<br>上面结束之后，每台机器上还得安装net-tools,docker-machine会用到netstat命令来检测端口使用情况，如果机器上没有安装会报错。如果你确定那台机器上的端口没问题，即使报错也没问题，最终那台机器还是会加入到docker-machine的管理中。<br>yum install net-tools<br>连接机器<br>    docker-machine create -d generic –generic-ip-address=192.168.1.28 node28<br>    node28为给机器的别名<br>    -d generic驱动类型<br>    –generic-ip-address 要控制机器的ip，必须<br>    –generic-engine-port docker-engine的远程访问端口，默认为2376<br>    –generic-ssh-key 远程访问机器的私钥，默认使用.ssh/下面的私钥<br>    –generic-ssh-user 远程访问机器的用户名，默认为root<br>    –generic-ssh-port 远程ssh访问的端口，默认为22<br>    –engine-insecure-registry docker-engine的insecure-registry<br>    –engine-install-url 安装docker-engine的地址，默认为”<a href="https://get.docker.com”" target="_blank" rel="noopener">https://get.docker.com”</a><br>    –engine-registry-mirror docker-engine镜像的代理地址<br>上面的命令根据国内环境可以换为下面<br>    docker-machine create \<br>    -d generic \<br>    –generic-ip-address=192.168.1.28 \<br>    –engine-install-url=<a href="https://get.daocloud.io/docker/" target="_blank" rel="noopener">https://get.daocloud.io/docker/</a>   \<br>    –engine-registry-mirror=<a href="http://91c0cc1e.m.daocloud.io" target="_blank" rel="noopener">http://91c0cc1e.m.daocloud.io</a>  \<br>    node28<br>通过docker-machine连接了各个机器后，就可以通过docker-machine来操作各个机器了，更多命令查看 docker-machine –help<br><a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="noopener">https://docs.docker.com/machine/install-machine/</a><br><a href="https://blog.csdn.net/vchy_zhao/article/details/70238472" target="_blank" rel="noopener">https://blog.csdn.net/vchy_zhao/article/details/70238472</a><br>swarm<br>简介<br>swarm从docker1.9版本开始就有了，但功能不完善、性能不稳定，一直不能登入生产环境，从1.12版本内置到了docker-engine中，可以直接使用docker swarm命令来操作swarm。<br>swarm是docker集群的资源管理工具。简单点理解，在很多台机器上部署docker，组成一个docker集群，并把整个集群的资源抽象成资源池，使用者部署docker应用的时候，只需要将应用交给swarm，swarm会根据整个集群资源的使用情况来分配资源给部署的docker应用，可以将这个集群的资源利用率达到最大。<br>类似的服务框架还有mesos+marathon，kubernetes。<br>编者是从很早接触docker的，swarm还没有出来，kubernetes还不成熟没有人在生产环境使用。<br>①最早使用的是mesos+marathon那一套，优点是基于成熟的资源调度管理框架mesos，缺点是部署起来还是很麻烦的，像服务发现、负载均衡等概念在里面也都有，但都是碎片化以插件的形式存在，整个体系感觉不是很完善、不像一个整体。<br>②kubernetes从发布1.0版本以后在生产得到了很多实践，开始步入主流压过swarm和mesos+marathon，kubernetes针对docker应用集群的特点，概括出几个对象，pod、service、replication controller，pod为运行的基本单元，service则是专门来服务发现和服务代理的，replication controller 应用的副本做负载均衡。kubernetes就是一个很专业很全面完善的docker集群管理工具。<br>③swarm在很多方面很像kubernetes，不知道是不是偷偷抄袭的。swarm通过命令就可以很简单的在docker集群中创建应用设置副本数量，内置服务发现代理。swarm+compose≈kubernetes。swarm由于现在内置于docker中，使用部署更简单，功能上和kubernetes很相似，轻量级。<br>常用命令<br>    swarm init<br>    swarm join<br>    service create<br>    service inspect<br>    service ls<br>    service rm<br>    service scale<br>    service ps<br>    service update</p>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/31/hello-world/"/>
      <url>/2018/08/31/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>docker</title>
      <link href="/2018/08/31/docker/"/>
      <url>/2018/08/31/docker/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
  
  
</search>
