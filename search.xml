<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F08%2F31%2F2018-07-10-Python-%E6%A0%87%E5%87%86%E5%BA%93%2F</url>
    <content type="text"><![CDATA[Python标准库Enter text in Markdown. Use the toolbar above, or click the ? button for formatting help.Python丰富而强大遍历的标准库是其最突出的优点之一. 这里当然不可能说明所有的标准库, 本文只简单列出一些标准库的使用, 还有一部分在其它博文中说明: Python时间系统 Python解析xml与JSON requests发送HTTP请求 PDB调试Python程序 Python日志模块logging Python正则表达式模块re Python虚拟环境virtualenv Python 数据库 Python Socket Python WSGI接口 使用urllib访问网络资源 操作系统环境os 建议使用 import os 风格而非 from os import *。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。 在使用 os 这样的大型模块时内置的 dir() 和 help() 函数非常有用。命令行参数sys 通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。 sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。 &gt;&gt;&gt; sys.stderr.write(&apos;Warning, log file not found starting a new one\n&apos;) Warning, log file not found starting a new one 数学math数据压缩zlib 以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。 &gt;&gt;&gt; import zlib &gt;&gt;&gt; s = b&apos;witch which has which witches wrist watch&apos; &gt;&gt;&gt; len(s) 41 &gt;&gt;&gt; t = zlib.compress(s) &gt;&gt;&gt; len(t) 37 &gt;&gt;&gt; zlib.decompress(t) b&apos;witch which has which witches wrist watch&apos; &gt;&gt;&gt; zlib.crc32(s) 226805979 性能测试timeit &gt;&gt;&gt; from timeit import Timer &gt;&gt;&gt; Timer(&apos;t=a; a=b; b=t&apos;, &apos;a=1; b=2&apos;).timeit() 0.57535828626024577 &gt;&gt;&gt; Timer(&apos;a,b = b,a&apos;, &apos;a=1; b=2&apos;).timeit() 0.54962537085770791 文件通配符glob glob模块提供了一个函数用于从目录通配符搜索中生成文件列表： &gt;&gt;&gt; import glob &gt;&gt;&gt; glob.glob(&apos;*.py&apos;) [&apos;primes.py&apos;, &apos;random.py&apos;, &apos;quote.py&apos;] 高精度小数 decimal decmial模块可以提供制定精度的小数运算，使用前需要&gt;&gt;&gt;import decmial。decmial对象由构造函数decmial.Decmial()根据一个int或字符串参数建立。Python3.5中decmial.Decmial()可以根据float建立对象，但那是不精确的。 &gt;&gt;&gt;decimal.Decimal(1) Decimal(&apos;1&apos;) &gt;&gt;&gt;decimal.Decimal(&quot;1.2&quot;) Decimal(&apos;1.2&apos;) math与cmath库中的数学函数对decimal不适用，但decimal自身提供了一系列数学函数。 &gt;&gt;&gt; x = decimal.Decimal(2) &gt;&gt;&gt; x.exp() Decimal(&apos;7.389056098930650227230427461&apos;) &gt;&gt;&gt; decimal.Decimal.exp(x) Decimal(&apos;7.389056098930650227230427461&apos;) 对象序列化pickle Python的pickle模块实现了基本的数据序列和反序列化。序列化：​import picklepickle.dump(obj, file, [,protocol]) 反序列化： obj = pickle.load(file)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
